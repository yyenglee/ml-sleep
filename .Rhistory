## read existing table with data metrics raw value
rawValuetable <- read.csv(paste0("./DATA/fList_rawValuetable.csv"), header=T) %>%
dplyr::select(-label)
rawValuetable <- labelData(rawValuetable, sleepGeneList=inputsleepGeneList)
## Create empty data based on the set of all known gene
geneListBlank <- read.table("./DATA/GeneList.txt",sep="\t", quote="", header=T)
geneListBlank <- labelData(geneListBlank, sleepGeneList = inputsleepGeneList)
EFtable <- geneListBlank
## Calculate evidence factor for each data metrics
PATH <- read.table("./DATA/fList_example.txt",header=F) %>%
magrittr::set_colnames(c("Source", "ID","Input","Models","DataType")) %>%
dplyr::mutate(rID=gsub("-",".",ID)) %>%
dplyr::select(-ID) %>%
dplyr::rename("ID"="rID") %>%
dplyr::mutate(EFscore=NA)
pdf(paste0(curPath,"EFbin_",curDate,".pdf"),8,3)
p <- list()
for(i in 3:ncol(rawValuetable)){
ID <- colnames(rawValuetable)[i]
if(i%%100==0){print(c("processing column: ", i, ID))}
dataType <- PATH[PATH$ID==ID,"DataType"]
dat <- rawValuetable[,c(1,2,i)] %>%
drop_na() %>%
magrittr::set_colnames(c("GeneSymbol", "label", "value"))
if(nrow(subset(dat, dat$label=="SRG"))<minInputSleepGeneCuttoff){
print(paste(c("skip as less than 25% sleeep genes found in the data:", ID)))
next
}
ef <- calEF_bin(dat,dataType)
if(nrow(ef) < 1){
print(paste(c("skip as equal data value:", ID)))
next
}
p[[1]] <- drawDensityPlot(dat, nCol=3)
p[[2]] <- drawEFPlot(ef, name = ID)
do.call("grid.arrange", c(p, ncol=2))
datEF <- matchEF_bin(dat,ef)
EFtable <- EFtable %>%
left_join(datEF, by=c("GeneSymbol")) %>%
dplyr::rename(!!ID := evidenceFactors)
datEF <- labelData(datEF, sleepGeneList=inputsleepGeneList)
if(length(table(ef$evidenceFactors))>1){
a <- subset(datEF, datEF$label=="SRG")
#PATH[PATH$ID==ID, "EFscore"] = mean(a[a$evidenceFactors>=quantile(a$evidenceFactors, .9),"evidenceFactors"])
PATH[PATH$ID==ID, "EFscore"] = max(a$evidenceFactors)
}
}
dev.off()
write.table(PATH, paste0(curPath, "fList_PATH_",curDate,".txt"),sep="\t", row.names=FALSE)
write.csv(EFtable, paste0(curPath, "fList_EFtable_",curDate,".csv"), row.names=FALSE)
## select feature with high evidence
zz <- data.frame(ID=character(),
maxEF=numeric(),
stringsAsFactors=FALSE)
for(i in 3:ncol(EFtable)){
ID <- colnames(EFtable)[i]
maxEF <- max(EFtable[,i],na.rm=TRUE)
zz <- rbind(zz, data.frame(ID, maxEF))
}
yy <- zz %>%
dplyr::arrange(desc(maxEF)) %>%
dplyr::filter(maxEF>=3)
head(yy, 20)
p1 <- ggplot(zz, aes(x=maxEF)) +
geom_histogram(bins=500, fill="darkblue", alpha=0.8) +
#geom_density() +
xlab("maxEF") +
geom_vline(xintercept = 3, linetype="dashed", color="#777777") +
scale_x_continuous(trans='log2') +
theme_bw()
ggsave(p1, filename = paste0(curPath,"EF_distribution",curDate,".pdf"),width = 2.5, height = 2)
cleanRawValuetable <- rawValuetable %>%
dplyr::select(c("GeneSymbol","label",c(names(yy)))) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<length(yy)* .5) %>%
dplyr::select(-naCount)
View(zz)
p1 <- ggplot(zz, aes(x=maxEF)) +
geom_histogram(bins=500, fill="darkblue", alpha=0.8) +
#geom_density() +
xlab("maxEF") +
geom_vline(xintercept = 3, linetype="dashed", color="#777777") +
scale_x_continuous(trans='log2') +
theme_bw()
ggsave(p1, filename = paste0(curPath,"EF_distribution",curDate,".pdf"),width = 2.5, height = 2)
head(yy)
cleanRawValuetable <- rawValuetable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-naCount)
cleanEFtable <- EFtable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-naCount)
## calculate pairwise correlation for selected samples wiht high evidence factors
corTable <- as.data.frame(cor(cleanRawValuetable[,3:ncol(cleanRawValuetable)], use="pairwise.complete.obs"))
rm(list=ls())
source("./R/function.R")
options(stringsAsFactors = FALSE)
DATALIST <- "./DATA/fList_example.txt"
pdir = "./"
setwd("./") # working director
curDate <- '20200220' ## working date, use to create unique identity for output
geneAliasDict <- list("mouse" = "./REFERENCE/Mus_musculus.gene_info.gz",
"human" = "./REFERENCE/Homo_sapiens.gene_info.gz")
taxid <- list("mouse"= "10090",
"human"="9606")
## Calculate evidence factor for each data metrics
PATH <- read.table(DATALIST, header=F) %>%
magrittr::set_colnames(c("Source", "ID","Input","Models","DataType")) %>%
dplyr::mutate(rID=gsub("-",".",ID)) %>%
dplyr::select(-ID) %>%
dplyr::rename("ID"="rID")
## read gene used as labels
inputsleepGene <- read.table("./DATA/inputSleepGeneList.txt", header=FALSE, sep="\t") %>%
magrittr::set_colnames(c("GeneSymbol", "Tier"))
inputsleepGeneList <- inputsleepGene$GeneSymbol
## Read the list of gene for evaluation
geneListBlank <- read.table("./DATA/GeneList.txt",sep="\t", quote="", header=T)
geneListBlank <- labelData(geneListBlank, sleepGeneList = inputsleepGeneList)
## Create empty data based on the set of all known gene
rawValuetable <- geneListBlank
## Add new data metrics to rawValuetable
rawValuetable <- addRawValue(PATH, rawValuetable, inputsleepGeneList)
write.csv(rawValuetable, "./DATA/fList_rawValuetable.csv", row.names=FALSE)
View(PATH)
rm(list=ls())
source("./R/function.R")
options(stringsAsFactors = FALSE)
DATALIST <- "./DATA/fList_example.txt"
setwd("./") # working director
geneAliasDict <- list("mouse" = "./REFERENCE/Mus_musculus.gene_info.gz",
"human" = "./REFERENCE/Homo_sapiens.gene_info.gz")
taxid <- list("mouse"= "10090",
"human"="9606")
## Calculate evidence factor for each data metrics
PATH <- read.table(DATALIST, header=F) %>%
magrittr::set_colnames(c("Source", "ID","Input","Models","DataType")) %>%
dplyr::mutate(rID=gsub("-",".",ID)) %>%
dplyr::select(-ID) %>%
dplyr::rename("ID"="rID")
## read gene used as labels
inputsleepGene <- read.table("./DATA/inputSleepGeneList.txt", header=FALSE, sep="\t") %>%
magrittr::set_colnames(c("GeneSymbol", "Tier"))
inputsleepGeneList <- inputsleepGene$GeneSymbol
## Read the list of gene for evaluation
geneListBlank <- read.table("./DATA/GeneList.txt",sep="\t", quote="", header=T)
geneListBlank <- labelData(geneListBlank, sleepGeneList = inputsleepGeneList)
## Create empty data based on the set of all known gene
rawValuetable <- geneListBlank
## Add new data metrics to rawValuetable
rawValuetable <- addRawValue(PATH, rawValuetable, inputsleepGeneList)
write.csv(rawValuetable, "./DATA/fList_rawValuetable.csv", row.names=FALSE)
source("./R/function.R")
options(stringsAsFactors = FALSE)
DATALIST <- "./DATA/fList_example.txt"
pdir = "./"
setwd("./") # working director
geneAliasDict <- list("mouse" = "./REFERENCE/Mus_musculus.gene_info.gz",
"human" = "./REFERENCE/Homo_sapiens.gene_info.gz")
taxid <- list("mouse"= "10090",
"human"="9606")
## Calculate evidence factor for each data metrics
PATH <- read.table(DATALIST, header=F) %>%
magrittr::set_colnames(c("Source", "ID","Input","Models","DataType")) %>%
dplyr::mutate(rID=gsub("-",".",ID)) %>%
dplyr::select(-ID) %>%
dplyr::rename("ID"="rID")
## read gene used as labels
inputsleepGene <- read.table("./DATA/inputSleepGeneList.txt", header=FALSE, sep="\t") %>%
magrittr::set_colnames(c("GeneSymbol", "Tier"))
inputsleepGeneList <- inputsleepGene$GeneSymbol
## Read the list of gene for evaluation
geneListBlank <- read.table("./DATA/GeneList.txt",sep="\t", quote="", header=T)
geneListBlank <- labelData(geneListBlank, sleepGeneList = inputsleepGeneList)
## Create empty data based on the set of all known gene
rawValuetable <- geneListBlank
## Add new data metrics to rawValuetable
rawValuetable <- addRawValue(PATH, rawValuetable, inputsleepGeneList)
write.csv(rawValuetable, "./DATA/fList_rawValuetable.csv", row.names=FALSE)
rm(list=ls())
library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(tidyverse)
library(magrittr)
library(ggrepel)
library(ggpubr)
library(cowplot)
source("./R/function.R")
options(stringsAsFactors = FALSE)
pdir = "./"
setwd("./") # working director
curPath <- "./OUT/" # directory to write output file
curDate <- '20210503' ## working date, use to create unique identity for output
geneAliasDict <- list("mouse" = "./REFERENCE/Mus_musculus.gene_info.gz",
"human" = "./REFERENCE/Homo_sapiens.gene_info.gz")
taxid <- list("mouse"= "10090",
"human"="9606")
## read gene used as labels
inputsleepGene <- read.table("./DATA/inputSleepGeneList.txt", header=FALSE, sep="\t") %>%
magrittr::set_colnames(c("GeneSymbol", "Tier"))
inputsleepGeneList <- inputsleepGene$GeneSymbol
minInputSleepGeneCuttoff <- length(inputsleepGeneList)*.25
## read existing table with data metrics raw value
rawValuetable <- read.csv(paste0("./DATA/fList_rawValuetable.csv"), header=T) %>%
dplyr::select(-label)
rawValuetable <- labelData(rawValuetable, sleepGeneList=inputsleepGeneList)
## Create empty data based on the set of all known gene
geneListBlank <- read.table("./DATA/GeneList.txt",sep="\t", quote="", header=T)
geneListBlank <- labelData(geneListBlank, sleepGeneList = inputsleepGeneList)
EFtable <- geneListBlank
## Calculate evidence factor for each data metrics
PATH <- read.table("./DATA/fList_example.txt",header=F) %>%
magrittr::set_colnames(c("Source", "ID","Input","Models","DataType")) %>%
dplyr::mutate(rID=gsub("-",".",ID)) %>%
dplyr::select(-ID) %>%
dplyr::rename("ID"="rID") %>%
dplyr::mutate(EFscore=NA)
pdf(paste0(curPath,"EFbin_",curDate,".pdf"),8,3)
p <- list()
for(i in 3:ncol(rawValuetable)){
ID <- colnames(rawValuetable)[i]
if(i%%100==0){print(c("processing column: ", i, ID))}
dataType <- PATH[PATH$ID==ID,"DataType"]
dat <- rawValuetable[,c(1,2,i)] %>%
drop_na() %>%
magrittr::set_colnames(c("GeneSymbol", "label", "value"))
if(nrow(subset(dat, dat$label=="SRG"))<minInputSleepGeneCuttoff){
print(paste(c("skip as less than 25% sleeep genes found in the data:", ID)))
next
}
ef <- calEF_bin(dat,dataType)
if(nrow(ef) < 1){
print(paste(c("skip as equal data value:", ID)))
next
}
p[[1]] <- drawDensityPlot(dat, nCol=3)
p[[2]] <- drawEFPlot(ef, name = ID)
do.call("grid.arrange", c(p, ncol=2))
datEF <- matchEF_bin(dat,ef)
EFtable <- EFtable %>%
left_join(datEF, by=c("GeneSymbol")) %>%
dplyr::rename(!!ID := evidenceFactors)
datEF <- labelData(datEF, sleepGeneList=inputsleepGeneList)
if(length(table(ef$evidenceFactors))>1){
a <- subset(datEF, datEF$label=="SRG")
#PATH[PATH$ID==ID, "EFscore"] = mean(a[a$evidenceFactors>=quantile(a$evidenceFactors, .9),"evidenceFactors"])
PATH[PATH$ID==ID, "EFscore"] = max(a$evidenceFactors)
}
}
dev.off()
write.table(PATH, paste0(curPath, "fList_PATH_",curDate,".txt"),sep="\t", row.names=FALSE)
write.csv(EFtable, paste0(curPath, "fList_EFtable_",curDate,".csv"), row.names=FALSE)
## select feature with high evidence
zz <- data.frame(ID=character(),
maxEF=numeric(),
stringsAsFactors=FALSE)
for(i in 3:ncol(EFtable)){
ID <- colnames(EFtable)[i]
maxEF <- max(EFtable[,i],na.rm=TRUE)
zz <- rbind(zz, data.frame(ID, maxEF))
}
yy <- zz %>%
dplyr::arrange(desc(maxEF)) %>%
dplyr::filter(maxEF>=3)
head(yy, 20)
p1 <- ggplot(zz, aes(x=maxEF)) +
geom_histogram(bins=500, fill="darkblue", alpha=0.8) +
#geom_density() +
xlab("maxEF") +
geom_vline(xintercept = 3, linetype="dashed", color="#777777") +
scale_x_continuous(trans='log2') +
theme_bw()
ggsave(p1, filename = paste0(curPath,"EF_distribution",curDate,".pdf"),width = 2.5, height = 2)
cleanRawValuetable <- rawValuetable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-naCount)
cleanEFtable <- EFtable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-naCount)
## calculate pairwise correlation for selected samples wiht high evidence factors
corTable <- as.data.frame(cor(cleanRawValuetable[,3:ncol(cleanRawValuetable)], use="pairwise.complete.obs"))
corTable$ID <- 1:(length(yy))
dataName <- colnames(cleanRawValuetable)[-c(1,2)]
vv <- melt(corTable, id.vars = "ID") %>%
dplyr::mutate(variable=as.numeric(variable)) %>%
dplyr::filter(ID!=variable, ID<variable, value>=0.8) %>%
dplyr::mutate(sp1=dataName[.$ID], sp2=dataName[.$variable])
cleanRawValuetable <- rawValuetable %>%
dplyr::select(c("GeneSymbol","label",c(names(yy)))) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<length(yy)* .5) %>%
dplyr::select(-vv$sp2) %>%
dplyr::select(-naCount)
cleanRawValuetable <- rawValuetable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-vv$sp2) %>%
dplyr::select(-naCount)
cleanEFtable <- EFtable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
#dplyr::select(-(vv$sp2[vv$sp2%in%names(yy)])) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-vv$sp2) %>%
dplyr::select(-naCount)
write.csv(cleanRawValuetable, paste0("fList_cleanRawValue_",curDate,".csv"), row.names=FALSE)
write.csv(cleanEFtable, paste0("fList_cleanEFtable_",curDate,".csv"), row.names=FALSE)
write.csv(cleanRawValuetable, paste0(curPath, "fList_cleanRawValue_",curDate,".csv"), row.names=FALSE)
write.csv(cleanEFtable, paste0(curPath, "fList_cleanEFtable_",curDate,".csv"), row.names=FALSE)
p1 <- ggplot(dat) +
geom_density_ridges2(aes(x=value,y=label,color=label,fill=label)) +
scale_color_manual(values=c('#0560B0','#A05021')) +
scale_fill_manual(values=c('dodgerblue','coral')) +
ylab("density") +
theme_minimal() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.position="none",
plot.margin = unit(c(-0.5, 3, 3, 3), "point")
) +
coord_cartesian(xlim = c(0,ceiling(max(dat$value))))
p2 <- ggplot(dat) +
geom_line(aes(x=value, y=evidenceFactors), color="#23395D") +
#geom_rug(subset(dat,dat$label=="nonSRG"), mapping=aes(x=value, y=evidenceFactors), sides='t', alpha=0.8, color="#A0A0A0") +
#geom_rug(subset(dat,dat$label=="SRG"), mapping=aes(x=value, y=evidenceFactors), sides='b', alpha=0.8, color="#E36927") +
ylim(0,4) +
ylab("evidence\nfactors") +
xlab("-log2pval(JTK_cycle)") +
theme_minimal() +
theme(legend.position="none",
plot.margin = unit(c(5, 3, 3, 3), "point")
) +
coord_cartesian(xlim = c(0,ceiling(max(dat$value))))
plot_grid(plotlist=list(p1,p2), ncol=1, align='v', rel_heights = c(1,1))
head(dat)
rm(list=ls())
curPath <- "./OUT/"
prefix <- "n10_20210503"
class1cutoff <- 0.413
ratio <- c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)
combineGeneScore <- data.frame(GeneSymbol=character(),
label=character(),
RFsum=numeric(),
RFsumF=numeric(),
ratio=numeric(),
stringsAsFactors=FALSE)
for(r in ratio){
print(r)
traintesttable <- read.csv(paste0(curPath, "traintesttable_", prefix, "_", r,".csv"),header=T)
RFtable <- read.csv(paste0(curPath, "RFtable_", prefix, "_", r,".csv"),header=T)
geneScoreTable <- data.frame(RFtable[,c("GeneSymbol","label")]) %>%
dplyr::mutate(RFsum=0)
for(i in 1:100){
test_gene <- traintesttable[,c(1:3,i+3)]
RFcount <- RFtable %>%
dplyr::select(c(1,2,3,i+3)) %>%
inner_join(test_gene, by="GeneSymbol")
#geneScoreTable$RFsum <- geneScoreTable$RFsum + apply(RFcount, 1, function(x){ifelse(x[7]==1,ifelse(x[4]==1,1,0),0)})
geneScoreTable$RFsum <- geneScoreTable$RFsum + apply(RFcount, 1, function(x){as.numeric(ifelse(x[7]==1,ifelse(x[4]>=0.1, x[4], 0),0))})
}
geneFreq <- apply(traintesttable[,-c(1:3)],1,sum)
geneScoreTable <- geneScoreTable %>%
dplyr::mutate(RFsumF=RFsum/geneFreq) %>%
dplyr::select(GeneSymbol, label, RFsum, RFsumF) %>%
dplyr::mutate(ratio=r)
combineGeneScore <- bind_rows(combineGeneScore, geneScoreTable)
}
summarizeGeneScore <- combineGeneScore %>%
dplyr::filter(RFsumF>0.1) %>%
group_by(GeneSymbol, label) %>%
dplyr::summarise(rawScore=mean(RFsumF), RFscore=max(ratio*10)+mean(RFsumF)) %>%
ungroup() %>%
dplyr::arrange(-RFscore) %>%
dplyr::mutate(RFrank=as.numeric(rownames(.))) %>%
dplyr::mutate(class=10-ifelse(rawScore>=class1cutoff, ceiling(RFscore),floor(RFscore)))
table(summarizeGeneScore$label, summarizeGeneScore$class)
class1cutoff <- 0.5
summarizeGeneScore <- combineGeneScore %>%
dplyr::filter(RFsumF>0.1) %>%
group_by(GeneSymbol, label) %>%
dplyr::summarise(rawScore=mean(RFsumF), RFscore=max(ratio*10)+mean(RFsumF)) %>%
ungroup() %>%
dplyr::arrange(-RFscore) %>%
dplyr::mutate(RFrank=as.numeric(rownames(.))) %>%
dplyr::mutate(class=10-ifelse(rawScore>=class1cutoff, ceiling(RFscore),floor(RFscore)))
table(summarizeGeneScore$label, summarizeGeneScore$class)
View(summarizeGeneScore)
write.table(summarizeGeneScore,paste0(curPath, "RFsummarizeOutput",prefix,".txt"), sep="\t", row.names=FALSE)
geneScore <- combineGeneScore %>%
dplyr::select(GeneSymbol, label, RFsumF, ratio) %>%
dplyr::mutate(RFsumF=ifelse(RFsumF>=0.1, RFsumF, NA)) %>%
drop_na() %>%
dplyr::filter(GeneSymbol %in% summarizeGeneScore$GeneSymbol) %>%
left_join(inputsleepGene, by="GeneSymbol") %>%
dplyr::mutate(sublabel=paste(label,Tier, sep=".")) %>%
dplyr::mutate(GeneSymbol=factor(GeneSymbol, levels=summarizeGeneScore$GeneSymbol),
ratio=factor(ratio, levels=unique(ratio)),
sublabel=factor(sublabel, levels=c("nonSRG.NA", "SRG.3", "SRG.2", "SRG.1")))
tt <- table(summarizeGeneScore$label, summarizeGeneScore$class)
classsize <- cumsum(tt[1,]+tt[2,])
p2 <- ggplot(geneScore, mapping=aes(x=RFsumF, y=factor(GeneSymbol))) +
geom_point(color="grey", size=0.25, alpha=0.8, shape=16) +
stat_summary(fun="mean", geom="point", aes(color=sublabel, shape=sublabel), alpha=0.9, size=1) +
stat_summary(subset(geneScore,geneScore$label=="SRG"&GeneSymbol %in% inputsleepGene[inputsleepGene$Tier==1,"GeneSymbol"]),
mapping=aes(x=RFsumF,
y=factor(GeneSymbol),
label=GeneSymbol),
fun=mean, geom="text", angle=45, size=3, color="#800000", hjust=-0.2, vjust=0) +
geom_hline(yintercept=classsize, linetype="dashed", alpha=0.6, size=0.3) +
scale_color_manual(values = c("#223E88", "#5BC0D2", "#FFC107", "#A9534F")) +
scale_fill_manual(values = c("#223E88", "#5BC0D2", "#FFC107", "#A9534F")) +
scale_shape_manual(values = c(21,15,1,19)) +
scale_y_discrete("Gene ranking",
breaks=summarizeGeneScore$GeneSymbol[classsize],
labels=as.character(classsize)) +
xlab("Prediction score") +
theme_classic() +
theme(axis.text.y = element_text(size=10))
ggsave(paste0(curPath,"prediction_score_",curDate,".pdf"), p2, width=4, height=3.5, useDingbats = FALSE)
ggsave(paste0(curPath,"prediction_score.pdf"), p2, width=4, height=3.5, useDingbats = FALSE)
p2 <- ggplot(geneScore, mapping=aes(x=RFsumF, y=factor(GeneSymbol))) +
geom_point(color="grey", size=0.25, alpha=0.8, shape=16) +
stat_summary(fun="mean", geom="point", aes(color=sublabel, shape=sublabel), alpha=0.9, size=1) +
stat_summary(subset(geneScore,geneScore$label=="SRG"&GeneSymbol %in% inputsleepGene[inputsleepGene$Tier==1,"GeneSymbol"]),
mapping=aes(x=RFsumF,
y=factor(GeneSymbol),
label=GeneSymbol),
fun=mean, geom="text", angle=45, size=3, color="#800000", hjust=-0.2, vjust=0) +
geom_hline(yintercept=classsize, linetype="dashed", alpha=0.6, size=0.3) +
scale_color_manual(values = c("#223E88", "#5BC0D2", "#FFC107", "#A9534F")) +
scale_fill_manual(values = c("#223E88", "#5BC0D2", "#FFC107", "#A9534F")) +
scale_shape_manual(values = c(21,15,1,19)) +
scale_y_discrete("Gene ranking",
breaks=summarizeGeneScore$GeneSymbol[classsize],
labels=as.character(classsize)) +
xlab("Prediction score") +
theme_classic() +
theme(axis.text.y = element_text(size=10))
geneScore <- combineGeneScore %>%
dplyr::select(GeneSymbol, label, RFsumF, ratio) %>%
dplyr::mutate(RFsumF=ifelse(RFsumF>=0.1, RFsumF, NA)) %>%
drop_na() %>%
dplyr::filter(GeneSymbol %in% summarizeGeneScore$GeneSymbol) %>%
left_join(inputsleepGene, by="GeneSymbol") %>%
dplyr::mutate(sublabel=paste(label,Tier, sep=".")) %>%
dplyr::mutate(GeneSymbol=factor(GeneSymbol, levels=summarizeGeneScore$GeneSymbol),
ratio=factor(ratio, levels=unique(ratio)),
sublabel=factor(sublabel, levels=c("nonSRG.NA", "SRG.3", "SRG.2", "SRG.1")))
inputsleepGene <- read.table("./DATA/inputSleepGeneList.txt", header=FALSE, sep="\t") %>%
magrittr::set_colnames(c("GeneSymbol", "Tier"))
geneScore <- combineGeneScore %>%
dplyr::select(GeneSymbol, label, RFsumF, ratio) %>%
dplyr::mutate(RFsumF=ifelse(RFsumF>=0.1, RFsumF, NA)) %>%
drop_na() %>%
dplyr::filter(GeneSymbol %in% summarizeGeneScore$GeneSymbol) %>%
left_join(inputsleepGene, by="GeneSymbol") %>%
dplyr::mutate(sublabel=paste(label,Tier, sep=".")) %>%
dplyr::mutate(GeneSymbol=factor(GeneSymbol, levels=summarizeGeneScore$GeneSymbol),
ratio=factor(ratio, levels=unique(ratio)),
sublabel=factor(sublabel, levels=c("nonSRG.NA", "SRG.3", "SRG.2", "SRG.1")))
tt <- table(summarizeGeneScore$label, summarizeGeneScore$class)
classsize <- cumsum(tt[1,]+tt[2,])
p2 <- ggplot(geneScore, mapping=aes(x=RFsumF, y=factor(GeneSymbol))) +
geom_point(color="grey", size=0.25, alpha=0.8, shape=16) +
stat_summary(fun="mean", geom="point", aes(color=sublabel, shape=sublabel), alpha=0.9, size=1) +
stat_summary(subset(geneScore,geneScore$label=="SRG"&GeneSymbol %in% inputsleepGene[inputsleepGene$Tier==1,"GeneSymbol"]),
mapping=aes(x=RFsumF,
y=factor(GeneSymbol),
label=GeneSymbol),
fun=mean, geom="text", angle=45, size=3, color="#800000", hjust=-0.2, vjust=0) +
geom_hline(yintercept=classsize, linetype="dashed", alpha=0.6, size=0.3) +
scale_color_manual(values = c("#223E88", "#5BC0D2", "#FFC107", "#A9534F")) +
scale_fill_manual(values = c("#223E88", "#5BC0D2", "#FFC107", "#A9534F")) +
scale_shape_manual(values = c(21,15,1,19)) +
scale_y_discrete("Gene ranking",
breaks=summarizeGeneScore$GeneSymbol[classsize],
labels=as.character(classsize)) +
xlab("Prediction score") +
theme_classic() +
theme(axis.text.y = element_text(size=10))
ggsave(paste0(curPath,"prediction_score.pdf"), p2, width=4, height=3.5, useDingbats = FALSE)
View(summarizeGeneScore)
p2 <- ggplot(geneScore, mapping=aes(x=RFsumF, y=factor(GeneSymbol))) +
geom_point(color="grey", size=0.25, alpha=0.8, shape=16) +
stat_summary(fun="mean", geom="point", aes(color=sublabel, shape=sublabel), alpha=0.9, size=1) +
stat_summary(subset(geneScore,geneScore$label=="SRG"&GeneSymbol %in% inputsleepGene[inputsleepGene$Tier==1,"GeneSymbol"]),
mapping=aes(x=RFsumF,
y=factor(GeneSymbol),
label=GeneSymbol),
fun=mean, geom="text", max.overlaps = getOption("ggrepel.max.overlaps", default = 10), angle=45, size=3, color="#800000", hjust=-0.2, vjust=0) +
geom_hline(yintercept=classsize, linetype="dashed", alpha=0.6, size=0.3) +
scale_color_manual(values = c("#223E88", "#5BC0D2", "#FFC107", "#A9534F")) +
scale_fill_manual(values = c("#223E88", "#5BC0D2", "#FFC107", "#A9534F")) +
scale_shape_manual(values = c(21,15,1,19)) +
scale_y_discrete("Gene ranking",
breaks=summarizeGeneScore$GeneSymbol[classsize],
labels=as.character(classsize)) +
xlab("Prediction score") +
theme_classic() +
theme(axis.text.y = element_text(size=10))
ggsave(paste0(curPath,"prediction_score.pdf"), p2, width=4, height=3.5, useDingbats = FALSE)
rm(list=ls())
