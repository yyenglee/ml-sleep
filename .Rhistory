expD = dir(paste0(pdir, "/process/pseudo_bulk_raw_count_sum_c19"), full.names = TRUE) %>%
purrr::map(function(z) {
inputD = read.delim(z)
cpmD = inputD[,-1] %>% purrr::map( function(zb) {
zbout = zb / sum(zb) *1000000
return(zbout)
}) %>% bind_cols()
##make sure the first 3 columns are control and the last 3 columns are hypoxia
cpmD =  dplyr::mutate(cpmD, meanCtrlE = apply(cpmD[,1:3], 1, mean), sdCtrlE = apply(cpmD[,1:3], 1, sd),
meanHypoE = apply(cpmD[,4:6], 1, mean), sdHypoE = apply(cpmD[,4:6], 1, sd), UID = inputD$UID,
clusterID = gsub("\\S+\\/(C\\d+)_matrix\\S+", "\\1", z) )
return(cpmD[,c(colnames(inputD), "meanCtrlE", "sdCtrlE", "meanHypoE", "sdHypoE", "clusterID")])
}) %>% bind_rows()
propD = dir(paste0(pdir, "/process/pseudo_bulk_countProp_c19"), full.names = TRUE) %>%
purrr::map(function(z) {
inputD = read.delim(z)
percentD = inputD[,-1] %>% purrr::map( function(za) {
za = gsub("\\s+", "", za)
zav = gsub("^(\\d+)/\\d+$", "\\1", za)
zan = gsub("^\\d+/(\\d+)$", "\\1", za)
zaout = as.numeric(zav)/as.numeric(zan)
return(zaout)
}) %>% bind_cols()
##make sure the first 3 columns are control and the last 3 columns are hypoxia
percentD =  dplyr::mutate(percentD, meanCtrlP = apply(percentD[,1:3], 1, mean), sdCtrlP = apply(percentD[,1:3], 1, sd),
meanHypoP = apply(percentD[,4:6], 1, mean), sdHypoP = apply(percentD[,4:6], 1, sd), UID = inputD$UID,
clusterID = gsub("\\S+\\/(C\\d+)_count\\S+", "\\1", z) )
return(percentD[,c(colnames(inputD), "meanCtrlP", "sdCtrlP", "meanHypoP", "sdHypoP", "clusterID")])
}) %>% bind_rows()
figA = dplyr::select(expD, UID, meanCtrlE, meanHypoE, clusterID) %>%
inner_join(clusterAnnoD, by = "clusterID") %>% dplyr::select(-clusterID) %>%
dplyr::mutate(joinID = paste(ctype, UID, sep = "_") ) %>%
dplyr::filter(UID %in% target_genes)
figB = dplyr::select(propD, UID, meanCtrlP, sdCtrlP, meanHypoP, sdHypoP, clusterID) %>%
inner_join(clusterAnnoD, by = "clusterID") %>% dplyr::select(-clusterID) %>%
dplyr::mutate(joinID = paste(ctype, UID, sep = "_") ) %>%
dplyr::filter(UID %in% target_genes) %>% dplyr::select(-UID, -ctype)
figD = inner_join(figA, figB, by = "joinID")
ctrlFigD = dplyr::select(figD, UID, ctype, joinID, meanP = meanCtrlP, sdP = sdCtrlP, meanE = meanCtrlE) %>% dplyr::mutate(group = "Control")
hypoFigD = dplyr::select(figD, UID, ctype, joinID, meanP = meanHypoP, sdP = sdHypoP, meanE = meanHypoE) %>% dplyr::mutate(group = "IH")
figD = rbind(ctrlFigD, hypoFigD) %>% dplyr::select(-joinID) %>%
dplyr::mutate(UID = factor(UID, levels = target_genes)) %>%
dplyr::filter(ctype %in% cellOrderA) %>%
dplyr::mutate(ctype = factor(ctype, levels = cellOrderA), meanP = meanP, sdP=sdP,
group = factor(group, levels = rev(c("Control", "IH"))))
##adjust the zero issue, add 1 for each meanE (CPM)
tepa = log2(figD$meanE + 1)
tepa[tepa >= 10] = 10
figD$meanE = tepa
colnames(figD) <- c("UID","ctype","meanProp","sdP","meanExp","group")
gplot <- ggplot(figD, aes(x=ctype, y=meanProp, fill=meanExp, color = group)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.85, lwd = 0.2) +
geom_errorbar(aes(ymin=meanProp, ymax=meanProp+sdP), width=.2, position=position_dodge(.9), lwd = 0.65) +
scale_color_manual(values=c( "Control" = '#999999', "IH" = '#E69F00'),guide = guide_legend(override.aes=aes(fill=NA)),breaks=c("Control","IH")) +
scale_fill_gradient2(name = "log2(CPM+1)", low="blue",mid="white",high="red",midpoint=5,
limits=c(0,10), breaks = seq(0, 10, by = 2.5), labels = c(0, "", 5, "", ">= 10") ) +
#scale_fill_gradient(name = "log2(CPM+1)", low="white",high="red",limits=c(0,10)) +
scale_y_continuous(breaks=c(0,1)) +
#labs(y = "% of total cells") +
labs(y = "Proportion of cells expressed marker genes") +
facet_wrap(~UID, strip.position="top",nrow=1) +
coord_flip() +
#facet_wrap(~UID, scale="free_x", strip.position="top", ncol=1) +
#geom_vline(xintercept = 8.5, linetype="dashed",size=0.5) +
theme_light() +
theme(panel.background = element_blank(),
panel.grid.major = element_line(size=0.5,color="#EFEFEF"),
panel.grid.minor = element_line(size=0.3,color="#F5F5F5"),
panel.border = element_blank()) +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 11),
#axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
#axis.line.y = element_blank(),
axis.line.x = element_line(color="grey70"),
#axis.ticks.x = element_line(color="grey70"),
axis.text.x = element_text(size = 10.6, hjust=0.5, vjust=0.5),
legend.text = element_text(size = 9),
legend.position = "right",
legend.key.size = unit(1,"line"),
plot.margin = unit(c(0.1,0.1,0.1,0.05), "in"),
legend.margin = margin(t=0,r=0.01,b=0.01,l=0.01,"inches"),
axis.title = element_text(size = 11.6, face = "bold"),
strip.text = element_text(size = 11.6, face = "bold", color="black"),
strip.text.x = element_text(angle=-90, hjust=0.5, vjust=0.5),
strip.background = element_blank())
#gplot
ggsave(gplot, filename = paste0(pdir, "/figures/markergenePropCPM_20201120.pdf"), width=12,height=4.5)
library(dplyr)
library(ggplot2)
library(scales)
library(cowplot)
#pdir="E:/backup_clean/scRNAseq"
pdir = "D:/Storage/Lab/scRNA_Dave/process_data"
# target_genes <- c("Sox17","Tek","Prox1","Cd19","Cd22","Ncr1","Klrb1c","Lef1","Cd3g","Cxcr6",
#                   "Fabp1","Itgax","Cd200r3","Fcer1a",
#                   "Treml4","Nr4a1","Cd163","Flt3","Gp5","Mpl","Igfbp3","Pdgfra",
#                   "Col1a1","Aoc3","Acta2","Cspg4","Higd1b","Hopx","Ager",
#                   "Sftpb","Etv5","Foxj1","Cyp2f2","Gypa")
# cellOrderA = rev(c("Endo","LymEndo","Bcells","NK","Tcells","NK-T", "Mphage","Baso", "Mono","Mphage-DC","DC","MegK"
#                    ,"FB","MyoFB","Pcyte","AT1","AT2","Ciliated","Erythro"))
target_genes <- c("Hopx", "Pdpn", "Abca3", "Etv5", "Foxj1", "Sox2", "Cd200r3", "Fcer1a", "Cd3e", "Lef1", "Cd19", "Cd22", "Klrb1c", "Gzma",
"Cd34", "Tek", "Prox1", "Mmrn1", "Fabp1", "Msr1", "Mcr1", "Gp5", "Mpl", "Gypa", "Tfrc", "Wif1", "Fgf18", "Aspn", "Igfbp3", "Pdgfra",
"Clec9a", "Flt3", "Vtn", "Higd1b", "Treml4", "Nr4a1", "Cxcr6", "Nkg7", "Cd163", "Ccr7")
cellOrderA = rev(c("AT1","AT2","Ciliated","Baso","Tcells","Bcells","NK","Endo","LymEndo", "Mphage","MegK","Erythro","MyoFB","FB",
"DC","Pcyte","Mono","NK-T","Mphage-DC"))
clusterAnnoD = readxl::read_excel(paste0(pdir, "/process/ClusterAnnotatedNew.xlsx"), sheet = 1) %>%
dplyr::select(clusterID = merged.clusterID, ctype = cellTypeBriefName) %>% dplyr::distinct() %>%
dplyr::mutate(clusterID = paste0("C", clusterID))
ratioD = readxl::read_excel(paste0(pdir, "/process/ClusterAnnotatedNew.xlsx"), sheet = 1)  %>%
dplyr::select(cellTypeBriefName, matches("Control|Hypoxia") ) %>%
split(.$cellTypeBriefName)  %>% purrr::map(function(z) {
zout = matrix( apply(z[,-1], 2, sum), nrow = 1) %>%  as.data.frame()  %>%
dplyr::mutate(cellTypeBriefName = unique(z$cellTypeBriefName))
colnames(zout) = colnames(z)[c(2:ncol(z),1)]
return(zout[,colnames(z)])
})  %>% bind_rows() %>%
purrr::map_if(is.numeric, function(z) {
z = z/sum(z)*100   #normalize to the number of cells per 100 cells (which is also percentage)
return(z)
}) %>% bind_cols()  %>%
tidyr::gather(key = "group", value = "num", -1) %>%
dplyr::rename(ctype = cellTypeBriefName) %>%
dplyr::mutate(group = gsub("_\\d+", "", group)) %>%
dplyr::group_by(group, ctype) %>%
dplyr::summarise(avg = mean(num), sdv = sd(num) ) %>%
as.data.frame() %>% dplyr::mutate(group = gsub("Hypoxia", "IH", group) )
levelD = ratioD %>% dplyr::select(-sdv) %>%
tidyr::spread(key = group, value = avg)  %>%
dplyr::mutate(difv = IH - Control, flag = (difv > 0)+0 ) %>%
dplyr::arrange(-flag, -abs(difv) )
ratioD = dplyr::mutate(ratioD, ctype = factor(ctype, levels = cellOrderA),
group = factor(group, levels = rev(c("Control","IH"))))
expD = dir(paste0(pdir, "/process/pseudo_bulk_raw_count_sum_c19"), full.names = TRUE) %>%
purrr::map(function(z) {
inputD = read.delim(z)
cpmD = inputD[,-1] %>% purrr::map( function(zb) {
zbout = zb / sum(zb) *1000000
return(zbout)
}) %>% bind_cols()
##make sure the first 3 columns are control and the last 3 columns are hypoxia
cpmD =  dplyr::mutate(cpmD, meanCtrlE = apply(cpmD[,1:3], 1, mean), sdCtrlE = apply(cpmD[,1:3], 1, sd),
meanHypoE = apply(cpmD[,4:6], 1, mean), sdHypoE = apply(cpmD[,4:6], 1, sd), UID = inputD$UID,
clusterID = gsub("\\S+\\/(C\\d+)_matrix\\S+", "\\1", z) )
return(cpmD[,c(colnames(inputD), "meanCtrlE", "sdCtrlE", "meanHypoE", "sdHypoE", "clusterID")])
}) %>% bind_rows()
propD = dir(paste0(pdir, "/process/pseudo_bulk_countProp_c19"), full.names = TRUE) %>%
purrr::map(function(z) {
inputD = read.delim(z)
percentD = inputD[,-1] %>% purrr::map( function(za) {
za = gsub("\\s+", "", za)
zav = gsub("^(\\d+)/\\d+$", "\\1", za)
zan = gsub("^\\d+/(\\d+)$", "\\1", za)
zaout = as.numeric(zav)/as.numeric(zan)
return(zaout)
}) %>% bind_cols()
##make sure the first 3 columns are control and the last 3 columns are hypoxia
percentD =  dplyr::mutate(percentD, meanCtrlP = apply(percentD[,1:3], 1, mean), sdCtrlP = apply(percentD[,1:3], 1, sd),
meanHypoP = apply(percentD[,4:6], 1, mean), sdHypoP = apply(percentD[,4:6], 1, sd), UID = inputD$UID,
clusterID = gsub("\\S+\\/(C\\d+)_count\\S+", "\\1", z) )
return(percentD[,c(colnames(inputD), "meanCtrlP", "sdCtrlP", "meanHypoP", "sdHypoP", "clusterID")])
}) %>% bind_rows()
figA = dplyr::select(expD, UID, meanCtrlE, meanHypoE, clusterID) %>%
inner_join(clusterAnnoD, by = "clusterID") %>% dplyr::select(-clusterID) %>%
dplyr::mutate(joinID = paste(ctype, UID, sep = "_") ) %>%
dplyr::filter(UID %in% target_genes)
figB = dplyr::select(propD, UID, meanCtrlP, sdCtrlP, meanHypoP, sdHypoP, clusterID) %>%
inner_join(clusterAnnoD, by = "clusterID") %>% dplyr::select(-clusterID) %>%
dplyr::mutate(joinID = paste(ctype, UID, sep = "_") ) %>%
dplyr::filter(UID %in% target_genes) %>% dplyr::select(-UID, -ctype)
figD = inner_join(figA, figB, by = "joinID")
ctrlFigD = dplyr::select(figD, UID, ctype, joinID, meanP = meanCtrlP, sdP = sdCtrlP, meanE = meanCtrlE) %>% dplyr::mutate(group = "Control")
hypoFigD = dplyr::select(figD, UID, ctype, joinID, meanP = meanHypoP, sdP = sdHypoP, meanE = meanHypoE) %>% dplyr::mutate(group = "IH")
figD = rbind(ctrlFigD, hypoFigD) %>% dplyr::select(-joinID) %>%
dplyr::mutate(UID = factor(UID, levels = target_genes)) %>%
dplyr::filter(ctype %in% cellOrderA) %>%
dplyr::mutate(ctype = factor(ctype, levels = cellOrderA), meanP = meanP, sdP=sdP,
group = factor(group, levels = rev(c("Control", "IH"))))
##adjust the zero issue, add 1 for each meanE (CPM)
tepa = log2(figD$meanE + 1)
tepa[tepa >= 10] = 10
figD$meanE = tepa
colnames(figD) <- c("UID","ctype","meanProp","sdP","meanExp","group")
gplot <- ggplot(figD, aes(x=ctype, y=meanProp, fill=meanExp, color = group)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.85, lwd = 0.2) +
geom_errorbar(aes(ymin=meanProp, ymax=meanProp+sdP), width=.2, position=position_dodge(.9), lwd = 0.65) +
scale_color_manual(values=c( "Control" = '#999999', "IH" = '#E69F00'),guide = guide_legend(override.aes=aes(fill=NA)),breaks=c("Control","IH")) +
scale_fill_gradient2(name = "log2(CPM+1)", low="blue",mid="white",high="red",midpoint=5,
limits=c(0,10), breaks = seq(0, 10, by = 2.5), labels = c(0, "", 5, "", ">= 10") ) +
#scale_fill_gradient(name = "log2(CPM+1)", low="white",high="red",limits=c(0,10)) +
scale_y_continuous(breaks=c(0,1)) +
#labs(y = "% of total cells") +
labs(y = "Proportion of cells expressed marker genes") +
facet_wrap(~UID, strip.position="top",nrow=1) +
coord_flip() +
#facet_wrap(~UID, scale="free_x", strip.position="top", ncol=1) +
#geom_vline(xintercept = 8.5, linetype="dashed",size=0.5) +
theme_light() +
theme(panel.background = element_blank(),
panel.grid.major = element_line(size=0.5,color="#EFEFEF"),
panel.grid.minor = element_line(size=0.3,color="#F5F5F5"),
panel.border = element_blank()) +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 11),
#axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
#axis.line.y = element_blank(),
axis.line.x = element_line(color="grey70"),
#axis.ticks.x = element_line(color="grey70"),
axis.text.x = element_text(size = 10.6, hjust=0.5, vjust=0.5),
legend.text = element_text(size = 9),
legend.position = "right",
legend.key.size = unit(1,"line"),
plot.margin = unit(c(0.1,0.1,0.1,0.05), "in"),
legend.margin = margin(t=0,r=0.01,b=0.01,l=0.01,"inches"),
axis.title = element_text(size = 11.6, face = "bold"),
strip.text = element_text(size = 11.6, face = "bold", color="black"),
strip.text.x = element_text(angle=-90, hjust=0.5, vjust=0.5),
strip.background = element_blank())
#gplot
ggsave(gplot, filename = paste0(pdir, "/figures/markergenePropCPM_20201120.pdf"), width=12,height=4.5)
target_genes <- c("Hopx", "Pdpn", "Abca3", "Etv5", "Foxj1", "Sox2", "Cd200r3", "Fcer1a", "Cd3e", "Lef1", "Cd19", "Cd22", "Klrb1c", "Gzma",
"Cd34", "Tek", "Prox1", "Mmrn1", "Fabp1", "Msr1", "Mcr1", "Gp5", "Mpl", "Gypa", "Tfrc", "Rgs2", "Pdgfra", "Aspn", "Igfbp3", "Pdgfra",
"Clec9a", "Flt3", "Vtn", "Higd1b", "Treml4", "Nr4a1", "Cxcr6", "Nkg7", "Cd163", "Ccr7")
expD = dir(paste0(pdir, "/process/pseudo_bulk_raw_count_sum_c19"), full.names = TRUE) %>%
purrr::map(function(z) {
inputD = read.delim(z)
cpmD = inputD[,-1] %>% purrr::map( function(zb) {
zbout = zb / sum(zb) *1000000
return(zbout)
}) %>% bind_cols()
##make sure the first 3 columns are control and the last 3 columns are hypoxia
cpmD =  dplyr::mutate(cpmD, meanCtrlE = apply(cpmD[,1:3], 1, mean), sdCtrlE = apply(cpmD[,1:3], 1, sd),
meanHypoE = apply(cpmD[,4:6], 1, mean), sdHypoE = apply(cpmD[,4:6], 1, sd), UID = inputD$UID,
clusterID = gsub("\\S+\\/(C\\d+)_matrix\\S+", "\\1", z) )
return(cpmD[,c(colnames(inputD), "meanCtrlE", "sdCtrlE", "meanHypoE", "sdHypoE", "clusterID")])
}) %>% bind_rows()
propD = dir(paste0(pdir, "/process/pseudo_bulk_countProp_c19"), full.names = TRUE) %>%
purrr::map(function(z) {
inputD = read.delim(z)
percentD = inputD[,-1] %>% purrr::map( function(za) {
za = gsub("\\s+", "", za)
zav = gsub("^(\\d+)/\\d+$", "\\1", za)
zan = gsub("^\\d+/(\\d+)$", "\\1", za)
zaout = as.numeric(zav)/as.numeric(zan)
return(zaout)
}) %>% bind_cols()
##make sure the first 3 columns are control and the last 3 columns are hypoxia
percentD =  dplyr::mutate(percentD, meanCtrlP = apply(percentD[,1:3], 1, mean), sdCtrlP = apply(percentD[,1:3], 1, sd),
meanHypoP = apply(percentD[,4:6], 1, mean), sdHypoP = apply(percentD[,4:6], 1, sd), UID = inputD$UID,
clusterID = gsub("\\S+\\/(C\\d+)_count\\S+", "\\1", z) )
return(percentD[,c(colnames(inputD), "meanCtrlP", "sdCtrlP", "meanHypoP", "sdHypoP", "clusterID")])
}) %>% bind_rows()
figA = dplyr::select(expD, UID, meanCtrlE, meanHypoE, clusterID) %>%
inner_join(clusterAnnoD, by = "clusterID") %>% dplyr::select(-clusterID) %>%
dplyr::mutate(joinID = paste(ctype, UID, sep = "_") ) %>%
dplyr::filter(UID %in% target_genes)
figB = dplyr::select(propD, UID, meanCtrlP, sdCtrlP, meanHypoP, sdHypoP, clusterID) %>%
inner_join(clusterAnnoD, by = "clusterID") %>% dplyr::select(-clusterID) %>%
dplyr::mutate(joinID = paste(ctype, UID, sep = "_") ) %>%
dplyr::filter(UID %in% target_genes) %>% dplyr::select(-UID, -ctype)
figD = inner_join(figA, figB, by = "joinID")
ctrlFigD = dplyr::select(figD, UID, ctype, joinID, meanP = meanCtrlP, sdP = sdCtrlP, meanE = meanCtrlE) %>% dplyr::mutate(group = "Control")
hypoFigD = dplyr::select(figD, UID, ctype, joinID, meanP = meanHypoP, sdP = sdHypoP, meanE = meanHypoE) %>% dplyr::mutate(group = "IH")
figD = rbind(ctrlFigD, hypoFigD) %>% dplyr::select(-joinID) %>%
dplyr::mutate(UID = factor(UID, levels = target_genes)) %>%
dplyr::filter(ctype %in% cellOrderA) %>%
dplyr::mutate(ctype = factor(ctype, levels = cellOrderA), meanP = meanP, sdP=sdP,
group = factor(group, levels = rev(c("Control", "IH"))))
##adjust the zero issue, add 1 for each meanE (CPM)
tepa = log2(figD$meanE + 1)
tepa[tepa >= 10] = 10
figD$meanE = tepa
target_genes <- c("Hopx", "Pdpn", "Abca3", "Etv5", "Foxj1", "Sox2", "Cd200r3", "Fcer1a", "Cd3e", "Lef1", "Cd19", "Cd22", "Klrb1c", "Gzma",
"Cd34", "Tek", "Prox1", "Mmrn1", "Fabp1", "Msr1", "Mcr1", "Gp5", "Mpl", "Gypa", "Tfrc", "Rgs2", "Aspn", "Igfbp3", "Pdgfra",
"Clec9a", "Flt3", "Vtn", "Higd1b", "Treml4", "Nr4a1", "Cxcr6", "Nkg7", "Cd163", "Ccr7")
figA = dplyr::select(expD, UID, meanCtrlE, meanHypoE, clusterID) %>%
inner_join(clusterAnnoD, by = "clusterID") %>% dplyr::select(-clusterID) %>%
dplyr::mutate(joinID = paste(ctype, UID, sep = "_") ) %>%
dplyr::filter(UID %in% target_genes)
figB = dplyr::select(propD, UID, meanCtrlP, sdCtrlP, meanHypoP, sdHypoP, clusterID) %>%
inner_join(clusterAnnoD, by = "clusterID") %>% dplyr::select(-clusterID) %>%
dplyr::mutate(joinID = paste(ctype, UID, sep = "_") ) %>%
dplyr::filter(UID %in% target_genes) %>% dplyr::select(-UID, -ctype)
figD = inner_join(figA, figB, by = "joinID")
ctrlFigD = dplyr::select(figD, UID, ctype, joinID, meanP = meanCtrlP, sdP = sdCtrlP, meanE = meanCtrlE) %>% dplyr::mutate(group = "Control")
hypoFigD = dplyr::select(figD, UID, ctype, joinID, meanP = meanHypoP, sdP = sdHypoP, meanE = meanHypoE) %>% dplyr::mutate(group = "IH")
figD = rbind(ctrlFigD, hypoFigD) %>% dplyr::select(-joinID) %>%
dplyr::mutate(UID = factor(UID, levels = target_genes)) %>%
dplyr::filter(ctype %in% cellOrderA) %>%
dplyr::mutate(ctype = factor(ctype, levels = cellOrderA), meanP = meanP, sdP=sdP,
group = factor(group, levels = rev(c("Control", "IH"))))
##adjust the zero issue, add 1 for each meanE (CPM)
tepa = log2(figD$meanE + 1)
tepa[tepa >= 10] = 10
figD$meanE = tepa
colnames(figD) <- c("UID","ctype","meanProp","sdP","meanExp","group")
gplot <- ggplot(figD, aes(x=ctype, y=meanProp, fill=meanExp, color = group)) +
geom_bar(stat="identity", position=position_dodge(), width = 0.85, lwd = 0.2) +
geom_errorbar(aes(ymin=meanProp, ymax=meanProp+sdP), width=.2, position=position_dodge(.9), lwd = 0.65) +
scale_color_manual(values=c( "Control" = '#999999', "IH" = '#E69F00'),guide = guide_legend(override.aes=aes(fill=NA)),breaks=c("Control","IH")) +
scale_fill_gradient2(name = "log2(CPM+1)", low="blue",mid="white",high="red",midpoint=5,
limits=c(0,10), breaks = seq(0, 10, by = 2.5), labels = c(0, "", 5, "", ">= 10") ) +
#scale_fill_gradient(name = "log2(CPM+1)", low="white",high="red",limits=c(0,10)) +
scale_y_continuous(breaks=c(0,1)) +
#labs(y = "% of total cells") +
labs(y = "Proportion of cells expressed marker genes") +
facet_wrap(~UID, strip.position="top",nrow=1) +
coord_flip() +
#facet_wrap(~UID, scale="free_x", strip.position="top", ncol=1) +
#geom_vline(xintercept = 8.5, linetype="dashed",size=0.5) +
theme_light() +
theme(panel.background = element_blank(),
panel.grid.major = element_line(size=0.5,color="#EFEFEF"),
panel.grid.minor = element_line(size=0.3,color="#F5F5F5"),
panel.border = element_blank()) +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(size = 11),
#axis.text.y = element_blank(),
#axis.ticks.y = element_blank(),
#axis.line.y = element_blank(),
axis.line.x = element_line(color="grey70"),
#axis.ticks.x = element_line(color="grey70"),
axis.text.x = element_text(size = 10.6, hjust=0.5, vjust=0.5),
legend.text = element_text(size = 9),
legend.position = "right",
legend.key.size = unit(1,"line"),
plot.margin = unit(c(0.1,0.1,0.1,0.05), "in"),
legend.margin = margin(t=0,r=0.01,b=0.01,l=0.01,"inches"),
axis.title = element_text(size = 11.6, face = "bold"),
strip.text = element_text(size = 11.6, face = "bold", color="black"),
strip.text.x = element_text(angle=-90, hjust=0.5, vjust=0.5),
strip.background = element_blank())
#gplot
ggsave(gplot, filename = paste0(pdir, "/figures/markergenePropCPM_20201120.pdf"), width=12,height=4.5)
library(limma)
sessionInfo()
library(homologene)
sessionInfo()
a <- c(0.2,0.4,0.6,1,1,,20,40,60,120)
a <- c(0.2,0.4,0.6,1,1.3,20,40,60,120)
plot(a)
a <- c(-2, -1,0,1,2,3,4,5)
exp(a)
plot(exp(a))
plot(a)
log(-1)
setwd("E:/Lab/sleep/sleep_gene/workDIR/ml-sleep")
source("./R/function.R")
options(stringsAsFactors = FALSE)
DATALIST <- "./DATA/fList_example.txt"
pdir = "./"
setwd("./") # working director
geneAliasDict <- list("mouse" = "./REFERENCE/Mus_musculus.gene_info.gz",
"human" = "./REFERENCE/Homo_sapiens.gene_info.gz")
taxid <- list("mouse"= "10090",
"human"="9606")
## Calculate evidence factor for each data metrics
PATH <- read.table(DATALIST, header=F) %>%
magrittr::set_colnames(c("Source", "ID","Input","Models","DataType")) %>%
dplyr::mutate(rID=gsub("-",".",ID)) %>%
dplyr::select(-ID) %>%
dplyr::rename("ID"="rID")
## read gene used as labels
inputsleepGene <- read.table("./DATA/inputSleepGeneList.txt", header=FALSE, sep="\t") %>%
magrittr::set_colnames(c("GeneSymbol", "Tier"))
inputsleepGeneList <- inputsleepGene$GeneSymbol
## Read the list of gene for evaluation
geneListBlank <- read.table("./DATA/GeneList.txt",sep="\t", quote="", header=T)
geneListBlank <- labelData(geneListBlank, sleepGeneList = inputsleepGeneList)
## Create empty data based on the set of all known gene
rawValuetable <- geneListBlank
## Add new data metrics to rawValuetable
rawValuetable <- addRawValue(PATH, rawValuetable, inputsleepGeneList)
library(dplyr)
## Read the list of gene for evaluation
geneListBlank <- read.table("./DATA/GeneList.txt",sep="\t", quote="", header=T)
geneListBlank <- labelData(geneListBlank, sleepGeneList = inputsleepGeneList)
## Create empty data based on the set of all known gene
rawValuetable <- geneListBlank
## Add new data metrics to rawValuetable
rawValuetable <- addRawValue(PATH, rawValuetable, inputsleepGeneList)
write.csv(rawValuetable, "./OUT/fList_rawValuetable.csv", row.names=FALSE)
## Script to calculate evidence factors given an input of row as gene and column as genomewide data metric
library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(tidyverse)
library(magrittr)
library(ggrepel)
library(ggpubr)
library(cowplot)
source("./R/function.R")
options(stringsAsFactors = FALSE)
pdir = "./"
setwd("./") # working director
curPath <- "./OUT/" # directory to write output file
curDate <- '20210503' ## working date, use to create unique identity for output
geneAliasDict <- list("mouse" = "./REFERENCE/Mus_musculus.gene_info.gz",
"human" = "./REFERENCE/Homo_sapiens.gene_info.gz")
taxid <- list("mouse"= "10090",
"human"="9606")
## read gene used as labels
inputsleepGene <- read.table("./DATA/inputSleepGeneList.txt", header=FALSE, sep="\t") %>%
magrittr::set_colnames(c("GeneSymbol", "Tier"))
inputsleepGeneList <- inputsleepGene$GeneSymbol
minInputSleepGeneCuttoff <- length(inputsleepGeneList)*.25
## read existing table with data metrics raw value
rawValuetable <- read.csv(paste0("./OUT/fList_rawValuetable.csv"), header=T) %>%
dplyr::select(-label)
rawValuetable <- labelData(rawValuetable, sleepGeneList=inputsleepGeneList)
## Create empty data based on the set of all known gene
geneListBlank <- read.table("./DATA/GeneList.txt",sep="\t", quote="", header=T)
geneListBlank <- labelData(geneListBlank, sleepGeneList = inputsleepGeneList)
EFtable <- geneListBlank
## Calculate evidence factor for each data metrics
PATH <- read.table("./DATA/fList_example.txt",header=F) %>%
magrittr::set_colnames(c("Source", "ID","Input","Models","DataType")) %>%
dplyr::mutate(rID=gsub("-",".",ID)) %>%
dplyr::select(-ID) %>%
dplyr::rename("ID"="rID") %>%
dplyr::mutate(EFscore=NA)
pdf(paste0(curPath,"EFbin_",curDate,".pdf"),8,3)
p <- list()
for(i in 3:ncol(rawValuetable)){
ID <- colnames(rawValuetable)[i]
if(i%%100==0){print(c("processing column: ", i, ID))}
dataType <- PATH[PATH$ID==ID,"DataType"]
dat <- rawValuetable[,c(1,2,i)] %>%
drop_na() %>%
magrittr::set_colnames(c("GeneSymbol", "label", "value"))
if(nrow(subset(dat, dat$label=="SRG"))<minInputSleepGeneCuttoff){
print(paste(c("skip as less than 25% sleeep genes found in the data:", ID)))
next
}
ef <- calEF_bin(dat,dataType)
if(nrow(ef) < 1){
print(paste(c("skip as equal data value:", ID)))
next
}
p[[1]] <- drawDensityPlot(dat, nCol=3)
p[[2]] <- drawEFPlot(ef, name = ID)
do.call("grid.arrange", c(p, ncol=2))
datEF <- matchEF_bin(dat,ef)
EFtable <- EFtable %>%
left_join(datEF, by=c("GeneSymbol")) %>%
dplyr::rename(!!ID := evidenceFactors)
datEF <- labelData(datEF, sleepGeneList=inputsleepGeneList)
if(length(table(ef$evidenceFactors))>1){
a <- subset(datEF, datEF$label=="SRG")
#PATH[PATH$ID==ID, "EFscore"] = mean(a[a$evidenceFactors>=quantile(a$evidenceFactors, .9),"evidenceFactors"])
PATH[PATH$ID==ID, "EFscore"] = max(a$evidenceFactors)
}
}
dev.off()
write.table(PATH, paste0(curPath, "fList_PATH_",curDate,".txt"),sep="\t", row.names=FALSE)
write.csv(EFtable, paste0(curPath, "fList_EFtable_",curDate,".csv"), row.names=FALSE)
## select feature with high evidence
zz <- data.frame(ID=character(),
maxEF=numeric(),
stringsAsFactors=FALSE)
for(i in 3:ncol(EFtable)){
ID <- colnames(EFtable)[i]
maxEF <- max(EFtable[,i],na.rm=TRUE)
zz <- rbind(zz, data.frame(ID, maxEF))
}
yy <- zz %>%
dplyr::arrange(desc(maxEF)) %>%
dplyr::filter(maxEF>=3)
head(yy, 20)
# plot distribution of maximum evidence factors for all tested data metrics
p1 <- ggplot(zz, aes(x=maxEF)) +
geom_histogram(bins=500, fill="darkblue", alpha=0.8) +
#geom_density() +
xlab("maxEF") +
geom_vline(xintercept = 3, linetype="dashed", color="#777777") +
scale_x_continuous(trans='log2') +
theme_bw()
ggsave(p1, filename = paste0(curPath,"EF_distribution",curDate,".pdf"),width = 2.5, height = 2)
cleanRawValuetable <- rawValuetable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-naCount)
cleanEFtable <- EFtable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-naCount)
## calculate pairwise correlation for selected samples wiht high evidence factors
corTable <- as.data.frame(cor(cleanRawValuetable[,3:ncol(cleanRawValuetable)], use="pairwise.complete.obs"))
corTable$ID <- 1:(length(yy))
dataName <- colnames(cleanRawValuetable)[-c(1,2)]
vv <- melt(corTable, id.vars = "ID") %>%
dplyr::mutate(variable=as.numeric(variable)) %>%
dplyr::filter(ID!=variable, ID<variable, value>=0.8) %>%
dplyr::mutate(sp1=dataName[.$ID], sp2=dataName[.$variable])
cleanRawValuetable <- rawValuetable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-vv$sp2) %>%
dplyr::select(-naCount)
cleanEFtable <- EFtable %>%
dplyr::select(c("GeneSymbol","label",yy$ID)) %>%
#dplyr::select(-(vv$sp2[vv$sp2%in%names(yy)])) %>%
dplyr::mutate(naCount = apply(.[-c(1,2)],1,function(x){sum(is.na(x))})) %>%
dplyr::filter(naCount<nrow(yy)* .5) %>%
dplyr::select(-vv$sp2) %>%
dplyr::select(-naCount)
write.csv(cleanRawValuetable, paste0(curPath, "fList_cleanRawValue_",curDate,".csv"), row.names=FALSE)
